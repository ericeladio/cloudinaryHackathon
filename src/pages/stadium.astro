---
import Layout from "../layouts/Layout.astro";
---

<Layout title="ðŸ”¥ Correo del infierno. ðŸ”¥">
  <main>
    <div class="instructions">
      <p>Choose One</p>
    </div>

    <section class="characters"></section>

    <section class="stadium">
      <section class="enemy"></section>
      <section class="hero"></section>
    </section>

    <ul class="attack-list"></ul>
  </main>

  <div class="audio">
    <audio class="sfx"></audio>
    <audio class="music" loop></audio>
  </div>

  <div class="modal-out">
    <div class="modal-in">
      <header></header>
      <section></section>
      <footer></footer>
    </div>
  </div>
</Layout>

<script is:inline src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

<script is:inline>
  let edictVictim;
  if (typeof window !== "undefined") {
    edictVictim = localStorage.getItem("victim");
  }

  let edictUser;
  if (typeof window !== "undefined") {
    edictUser = localStorage.getItem("user");
  }

  let victimName;
  if (typeof window !== "undefined") {
    victimName = localStorage.getItem("victimName");
  }
  /////////////////////////////////////////////
  // CONTENTS
  /////////////////////////////////////////////
  // VARIABLES
  // UTILITIES
  // RANDOM NUMBER GENERATOR
  // CHARACTER BUILD
  // ATTACK MULTIPLIER
  // SFX PLAYER
  // HP BAR ANIMATION
  // RESET
  // CHARACTER CHOICE
  // HERO ATTACK
  // ENEMY ATTACK
  // ATTACK SEQUENCE
  // MODAL CONTROLS

  /////////////////////////////////////////////
  // VARIABLES
  /////////////////////////////////////////////
  var music = {};
  var typeSprite = "";
  var types = [];
  var gameData = {};
  var attackName = "";
  var curAttack = {};
  var randInt = 0;
  var enemyAttack = {};
  var characters = [];
  var defendProgressInt = null;
  var defendProgressComplete = 0;
  var progressInt = null;
  var progressComplete = 0;

  function buildVars() {
    // all the music for the game
    // http://downloads.khinsider.com/game-soundtracks/album/pokemon-gameboy-sound-collection
    music = {
      opening:
        "https://eta.vgmtreasurechest.com/soundtracks/pokemon-game-boy-pok-mon-sound-complete-set-play-cd/vfywpihuos/1-01.%20Opening.mp3",
      battle:
        "https://eta.vgmtreasurechest.com/soundtracks/pokemon-game-boy-pok-mon-sound-complete-set-play-cd/wpfiaxpxan/1-07.%20Battle%20%28Vs.%20Wild%20Pok%C3%A9mon%29.mp3",
      victory:
        "https://eta.vgmtreasurechest.com/soundtracks/pokemon-game-boy-pok-mon-sound-complete-set-play-cd/xgzrmqyzaq/1-16.%20Victory%20%28Vs.%20Trainer%29.mp3",
      pikachu: "src/assets/pikachu.mp3",
      squirtle: "src/assets/squirtle.mp3",
    };

    typeSprite =
      "http://orig15.deviantart.net/24d8/f/2011/057/3/5/ge___energy_type_icons_by_aschefield101-d3agp02.png";
    types = [
      "bug",
      "dark",
      "dragon",
      "electric",
      "fairy",
      "fighting",
      "fire",
      "flying",
      "ghost",
      "grass",
      "ground",
      "ice",
      "normal",
      "poison",
      "psychic",
      "rock",
      "steel",
      "water",
    ];

    // the data for the game in play
    gameData = {
      step: 1,
      hero: {},
      enemy: {},
    };

    // attack variables
    attackName = "";
    curAttack = {};
    randInt = 0;
    enemyAttack = {};
    defendProgressInt = null;
    defendProgressComplete = 0;
    progressInt = null;
    progressComplete = 0;

    // available characters
    characters = [
      {
        name: "pikachu",
        type: "electric",
        weakness: ["fighting"],
        resistance: ["steel"],
        img: {
          default:
            "https://projectpokemon.org/images/normal-sprite/pikachu.gif",
          front:
            "https://i.gifer.com/origin/59/593a5e1a1979117c874c9f350fe87ab4_w200.gif",
          back: "https://play.pokemonshowdown.com/sprites/ani-back/pikachu.gif",
        },
        hp: {
          current: 500,
          total: 500,
        },
        attacks: [
          {
            name: "thunder jolt",
            hp: randomNum(40, 20),
            avail: {
              total: 30,
              remaining: 30,
            },
          },
          {
            name: "electro ball",
            hp: randomNum(60, 45),
            avail: {
              total: 10,
              remaining: 10,
            },
          },
          {
            name: "volt tackle",
            hp: randomNum(75, 60),
            avail: {
              total: 5,
              remaining: 5,
            },
          },
          {
            name: "thunder crack",
            hp: randomNum(160, 130),
            avail: {
              total: 2,
              remaining: 2,
            },
          },
        ],
      },
      {
        name: "squirtle",
        type: "water",
        weakness: ["electric", "grass"],
        resistance: ["normal", "fire"],
        img: {
          default:
            "https://projectpokemon.org/images/normal-sprite/squirtle.gif",
          front:
            "https://66.media.tumblr.com/ddd22fe10a485ed56a46d958c058a970/tumblr_n9lnpepqkW1scncwdo1_500.gif",
          back: "https://play.pokemonshowdown.com/sprites/ani-back/squirtle.gif",
        },
        hp: {
          current: 500,
          total: 500,
        },
        attacks: [
          {
            name: "bubble",
            hp: randomNum(40, 20),
            avail: {
              total: 30,
              remaining: 30,
            },
          },
          {
            name: "water gun",
            hp: randomNum(60, 45),
            avail: {
              total: 10,
              remaining: 10,
            },
          },
          {
            name: "shell attack",
            hp: randomNum(75, 60),
            avail: {
              total: 5,
              remaining: 5,
            },
          },
          {
            name: "hydro pump",
            hp: randomNum(160, 130),
            avail: {
              total: 2,
              remaining: 2,
            },
          },
        ],
      },
    ];
  }

  /////////////////////////////////////////////
  // UTILITY
  /////////////////////////////////////////////
  // RANDOM NUMBER GENERATOR
  // min is optional
  function randomNum(max, min) {
    // generate a random number

    // min not required
    if (min === undefined || min === "" || min === null) {
      // min default value
      min = 0;
    }

    // random number, yay
    return Math.floor(Math.random() * (max - min) + min);
  }

  // CHARACTER BUILD
  // build the character UI
  function populateChar(container, character) {
    // which img
    var facing = "front";
    if (character === "hero") {
      // we see the back of our hero
      // a real hero faces danger
      facing = "back";
    }

    // build the character
    container.append(
      '<section class="char"><img src="' +
        gameData[character].img[facing] +
        '" alt="' +
        gameData[character].name +
        '"><aside class="data"><h2>' +
        gameData[character].name +
        '</h2><div><progress max="' +
        gameData[character].hp.total +
        '"></progress><p><span>' +
        gameData[character].hp.current +
        "</span>/" +
        gameData[character].hp.total +
        "</p></div></aside></section>",
    );
  }

  // ATTACK MULTIPLIER
  // modify attack value for weaknesses & strengths
  function attackMultiplier(attacker, curAttack) {
    var defender = "enemy";
    if (attacker === "enemy") {
      defender = "hero";
    }

    if (gameData[defender].weakness.indexOf(gameData[attacker].type) >= 0) {
      // weakness exists
      curAttack.hp *= 2;
    }

    if (gameData[defender].resistance.indexOf(gameData[attacker].type) >= 0) {
      // weakness exists
      curAttack.hp /= 2;
    }

    curAttack.hp = Math.floor(curAttack.hp);
    return curAttack.hp;
  }

  // SFX PLAYER
  // stops music and plays sfx
  function playSound(name) {
    // load sfx src
    $("audio.sfx").attr("src", music[name]);
    // pause game music
    $("audio.music")[0].pause();
    // character announce yourself
    $("audio.sfx")[0].play();

    // timeout to stop music at given point
    setTimeout(function () {
      // pause the sfx
      $("audio.sfx")[0].pause();
      // start the music again
      $("audio.music")[0].play();
      // reset the sfx
      $("audio.sfx")[0].currentTime = 0;
    }, 2000);
  }

  // HP BAR ANIMATION
  // stop and set health bar
  function setHP() {
    // stop health animation and set value
    clearInterval(defendProgressInt);
    clearInterval(progressInt);
    $(".stadium .enemy progress").val(gameData.enemy.hp.current);
    $(".stadium .hero progress").val(gameData.hero.hp.current);
  }

  /////////////////////////////////////////////
  // RESET
  /////////////////////////////////////////////
  function resetGame() {
    // set default values for game variables
    buildVars();

    // clear the stadium
    $(".hero").empty();
    $(".enemy").empty();

    // reset
    $(".attack-list li").unbind("click");
    $(".attack-list").empty();
    $(".stadium .enemy").css({ padding: "0" });
    $(".instructions p").text("Choose one");

    // set & start the opening game music
    $("audio.music").attr("src", music["opening"]);
    $("audio.music")[0].play();

    // empty characters
    $(".characters").empty();
    $(".characters").removeClass("hidden");

    for (var i in characters) {
      // build the character list
      $(".characters").append(
        '<div class="char-container"><img src="' +
          characters[i].img.default +
          '" alt="' +
          characters[i].name +
          '"><h2>' +
          characters[i].name +
          '</h2><span class="type ' +
          characters[i].type +
          '"></span></div>',
      );
    }
    characterChoice();
  }
  resetGame();
  $(".logo").click(function () {
    resetGame();
  });

  /////////////////////////////////////////////
  // CHARACTER CHOICE
  /////////////////////////////////////////////
  function characterChoice() {
    $(".characters .char-container").click(function () {
      // you have chosen a character

      // your chosen character name
      var name = $(this).children("h2").text().toLowerCase();

      switch (gameData.step) {
        // switch for the current step in the game

        case 1:
          // step 1: choose your hero
          for (var i in characters) {
            if (characters[i].name === name) {
              // find and save your chosen hero's data
              gameData.hero = characters[i];
            }
          }

          // remove the character from the available list
          var char = $(this).remove();
          // build my hero
          populateChar($(".stadium .hero"), "hero");

          for (var i in gameData.hero.attacks) {
            // populate attack list
            $(".attack-list").append(
              '<li><p class="attack-name"><strong>' +
                gameData.hero.attacks[i].name +
                '</strong></p><p class="attack-count"><small><span>' +
                gameData.hero.attacks[i].avail.remaining +
                "</span>/" +
                gameData.hero.attacks[i].avail.total +
                "</small></p></li>",
            );
          }

          $(".attack-list").addClass("disabled");

          // update instructions
          $(".instructions p").text("Choose your enemy");
          // set health bar value
          $(".stadium .hero progress").val(gameData.hero.hp.current);

          // let your hero roar
          playSound(name);

          // move on to choosing an enemy
          gameData.step = 2;
          break;

        case 2:
          // step 2: choose your enemy
          for (var i in characters) {
            if (characters[i].name === name) {
              // find and save the enemy data
              gameData.enemy = characters[i];
            }
          }

          // remove the enemy from the list
          var char = $(this).remove();
          // build the enemy
          populateChar($(".stadium .enemy"), "enemy");
          // pad the stadium - give them some breathing room
          $(".stadium .enemy").css({ padding: "25px 0" });

          // update instructions
          $(".instructions p").text("Fight!!!");

          // hide the hero list
          $(".characters")
            .children()
            .slideUp("500", function () {
              $(".characters").addClass("hidden");
            });

          // update enemy health bar value
          $(".stadium .enemy progress").val(gameData.enemy.hp.current);

          // the enemy whimpers in fear
          playSound(name);

          // update step to attack phase and bind click events
          gameData.step = 3;
          attackList();
          break;
      }
    });
  }

  /////////////////////////////////////////////
  // HERO ATTACK
  /////////////////////////////////////////////
  function attackEnemy(that, callback) {
    // attack the enemy!!!

    // name of your attack
    attackName = that
      .children(".attack-name")
      .children("strong")
      .text()
      .toLowerCase();

    for (var i in gameData.hero.attacks) {
      if (gameData.hero.attacks[i].name === attackName) {
        // get chosen attack data
        curAttack = gameData.hero.attacks[i];
      }
    }

    // if there are attacks left
    if (curAttack.avail.remaining > 0) {
      // attack!!!
      $(".attack-list").addClass("disabled");

      $(".hero .char img").animate(
        {
          "margin-left": "-30px",
          "margin-top": "10px",
        },
        50,
        "swing",
      );
      $(".hero .char img").animate(
        {
          "margin-left": "30px",
          "margin-top": "-10px",
        },
        50,
        "swing",
      );
      $(".hero .char img").animate(
        {
          "margin-left": "0px",
          "margin-top": "0px",
        },
        50,
        "swing",
      );

      // attack enemy
      gameData.enemy.hp.current -= attackMultiplier("hero", curAttack);

      if (gameData.enemy.hp.current <= 0) {
        // Enemy is dead

        clearModal();
        $(".modal-in header").append(
          `<h1 Class="modal-text">${victimName} esta en el infierno</h1><span id="close2" class="close">x</span>`,
        );
        $(".modal-in section").append(
          `<img Class="modal-img" src=${edictVictim}/>`,
        );
        $(".modal-out").slideDown("400");
        modalControls();

        gameData.enemy.hp.current = 0;
        // clear the stadium of the dead
        $(".enemy").empty();
        // show the available characters
        $(".characters").removeClass("hidden");
        $(".characters").children().slideDown("500");

        gameData.enemy = {};

        // choose enemy
        gameData.step = 2;
        // unbind click for reset
        $(".attack-list li").unbind("click");
      } else {
        // enemy is still alive (Attack!!!)

        // subtract attack
        curAttack.avail.remaining--;

        // interval to animate health bar
        progressInt = setInterval(function () {
          // get current value of health bar
          var val = $(".stadium .enemy progress").val();
          val--;

          // update health bar value
          $(".stadium .enemy progress").val(val);

          if (val === gameData.enemy.hp.current) {
            // if you've hit your target clear interval
            clearInterval(progressInt);
            progressComplete = 1;
          }
        }, 1);

        // update health numbers
        $(".stadium .enemy .data p span").text(gameData.enemy.hp.current);
        that
          .children(".attack-count")
          .children("small")
          .children("span")
          .text(curAttack.avail.remaining);

        // wait a second to recover
        setTimeout(function () {
          // now defend that attack
          defend(that);
        }, 1000);
      }
    }
  }

  /////////////////////////////////////////////
  // ENEMY ATTACK (DEFEND)
  /////////////////////////////////////////////
  function defend(that) {
    // random attack
    randInt = randomNum(gameData.enemy.attacks.length);
    enemyAttack = gameData.enemy.attacks[randInt];

    // enemy attack animation sequence
    $(".enemy .char img").animate(
      {
        "margin-right": "-30px",
        "margin-top": "-10px",
      },
      50,
      "swing",
    );
    $(".enemy .char img").animate(
      {
        "margin-right": "30px",
        "margin-top": "10px",
      },
      50,
      "swing",
    );
    $(".enemy .char img").animate(
      {
        "margin-right": "0px",
        "margin-top": "0px",
      },
      50,
      "swing",
    );

    // attack the hero
    gameData.hero.hp.current -= attackMultiplier("enemy", enemyAttack);

    if (gameData.hero.hp.current <= 0) {
      // ding dong the hero's dead

      clearModal();
      $(".modal-in header").append(
        '<h1 Class="modal-text">Tu alma estara en el infierno</h1><span id="close" class="close">x</span>',
      );
      $(".modal-in section").append(
        `<img Class="modal-img" src=${edictUser}/>`,
      );
      $(".modal-out").slideDown("400");
      modalControls();

      gameData.hero.hp.current = 0;

      resetGame();
    } else {
      // the hero lives

      // subtract attack from enemy count
      gameData.enemy.attacks[randInt].avail.remaining--;

      // health bar animation
      defendProgressInt = setInterval(function () {
        // get current val of health bar
        var val = $(".stadium .hero progress").val();
        val--;

        // update health bar value
        $(".stadium .hero progress").val(val);

        if (val === gameData.hero.hp.current) {
          // stop the interval when target is attained
          clearInterval(defendProgressInt);
          defendProgressComplete = 1;
        }
      }, 1);

      // update health value
      $(".stadium .hero .data p span").text(gameData.hero.hp.current);

      setTimeout(function () {
        if (defendProgressComplete && progressComplete) {
          $(".attack-list").removeClass("disabled");
        } else {
          setHP();
          $(".attack-list").removeClass("disabled");
        }
      }, 500);
    }
  }

  /////////////////////////////////////////////
  // ATTACK SEQUENCE
  /////////////////////////////////////////////
  function attackList() {
    // attack instantiation
    $(".attack-list").removeClass("disabled");

    $(".attack-list li").click(function () {
      // attack choice is clicked
      var doAttack = 1;

      if (gameData.step === 3) {
        // attack step - start attack sequence
        attackEnemy($(this));
      }
    });

    setTimeout(function () {
      // characters chosen - set & start the battle music
      $("audio.music").attr("src", music["battle"]);
      $("audio.music")[0].play();
    }, 1500);
  }

  /////////////////////////////////////////////
  // MODAL
  /////////////////////////////////////////////
  function modalControls() {
    $(".modal-out").click(function () {
      $(this).slideUp("400");
    });
    $(".modal-in .close").click(function (e) {
      window.location.href = "/";
      $(".modal-out").slideUp("400");
    });

    $(".modal-in").click(function (e) {
      e.stopPropagation();
      e.preventDefault();
    });
  }
  function clearModal() {
    $(".modal-in header").empty();
    $(".modal-in section").empty();
    $(".modal-in footer").empty();
    setHP();
  }
</script>
<style>
  body {
    font-family: "helvetica neue", helvetica, arial, sans-serif;
    font-size: 16px;
    padding-top: 30px;
  }
  main {
    color: azure;
  }

  header {
    text-align: center;
    img {
      max-height: 100px;
      cursor: pointer;
    }
  }

  strong {
    font-weight: 600;
    line-height: 1.5em;
  }

  .type {
    display: inline-block;
    height: 30px;
    width: 30px;
    margin: 10px;
    background-image: url("http://orig15.deviantart.net/24d8/f/2011/057/3/5/ge___energy_type_icons_by_aschefield101-d3agp02.png");
    background-repeat: no-repeat;
    background-size: 500% 400%;
    &.electric {
      background-position: 100% 0;
    }
    &.fire {
      background-position: 25% 33%;
    }
    &.water {
      background-position: 63% 100%;
    }
    &.grass {
      background-position: 100% 33%;
    }
    &.fighting {
      background-position: 0 33%;
    }
  }

  .row {
    display: block;
    min-height: 50px;
  }

  .instructions {
    text-align: center;
    padding: 20px 0;

    p {
      font-size: 2em;
    }
  }

  .characters {
    display: flex;
    justify-content: space-around;
    margin: 0 auto;
    transition:
      visibility 0.3s ease,
      opacity 0.3s ease,
      height 0.3s ease;
    width: 60%;
    &.hidden {
      visibility: hidden;
      opacity: 0;
      height: 0;
    }
  }
  .char-container {
    width: 25%;
    text-align: center;
    padding: 25px 0;
    cursor: pointer;

    img {
      max-height: 100px;
      margin-bottom: 13px;
      transition:
        transform 0.3s ease,
        margin 0.3s ease;
    }
    h2 {
      text-transform: capitalize;
      font-size: 1.5em;
      font-weight: 600;
      transition: font-size 0.3s ease;
    }

    &:hover {
      img {
        transform: scale(1.3);
        margin-bottom: 17px;
      }
      h2 {
        font-size: 1.2em;
      }
    }
  }

  .stadium {
    width: 100%;
    > section {
      display: block;
      box-sizing: border-box;

      .char {
        height: 175px;
        position: relative;

        > * {
          position: absolute;
          text-transform: capitalize;
        }

        img {
          height: 150px;
        }

        .data {
          width: 20vw;
          padding: 15px 2%;
          box-sizing: border-box;
          top: 25px;
          progress {
            width: 100%;
          }
          p {
            text-align: right;
          }
        }
      }
    }

    .enemy {
      img {
        right: 15vw;
      }
      .data {
        left: 15vw;
      }
    }

    .hero {
      img {
        left: 15vw;
      }
      .data {
        right: 15vw;
      }
    }
  }

  .attack-list {
    display: flex;
    flex-wrap: wrap;
    background: blueviolet;
    position: initial;
    transition: opacity 0.3s ease;
    text-transform: capitalize;
    padding: 0;
    &.disabled {
      opacity: 0.5;
      position: relative;
      z-index: -1;
      cursor: initial;
    }

    li {
      width: 50%;
      text-align: center;
      padding: 25px 0;
      box-sizing: border-box;
      border: 2px solid orange;
      cursor: pointer;
      transition: background 0.3s ease;
      list-style-type: none;
      &:hover {
        background-color: indigo;
      }
    }
  }

  .modal-out {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    background: rgba(33, 33, 33, 0.75);
    z-index: 900;

    .modal-in {
      position: fixed;
      top: 15vh;
      left: 0;
      right: 0;
      width: 50vw;
      height: 70vh;
      margin: 0 auto;
      background: black;

      header {
        position: relative;
        min-height: 30px;
        text-align: center;
        padding: 10px 3%;
        box-sizing: border-box;
        h1 {
          font-size: 2.2em;
        }
      }
      .close {
        cursor: pointer;
        position: absolute;
        top: 13px;
        right: 13px;
      }
      .modal-img {
        width: 80%;
        height: 250px;
      }

      section {
        box-sizing: border-box;
        padding: 25px 3%;
        display: flex;
        justify-content: center;
      }
    }
  }
</style>
